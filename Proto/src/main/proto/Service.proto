syntax = "proto3";
option java_multiple_files = true;
package tecnico.sec.grpc;

message Error {
  string message = 3;
  bytes signature = 4;
}

message ChallengeRequest{
  bytes publicKey = 1;
  int64 nonce = 2;
}

message ChallengeResponse{
  oneof response {
    Challenge challenge = 1;
    Error error = 2;
  }
  bytes signature = 3;
}

message Challenge{
  int32 zeros = 1;
  int64 nonce = 2;
}

message ChallengeCompleted{
  int32 padding = 1;
  bytes hash = 2;
}

message OpenAccountRequest {
  bytes publicKey = 1;
  bytes signature = 2;
}
message OpenAccountResponse {
  oneof response{
    OpenAccount openAccount = 1;
    Error error = 2;
  }
}
message OpenAccount{
  bytes signature = 1;
}

message SendAmountRequest {
  bytes publicKeySource = 1;
  bytes publicKeyDestination = 2;
  int32 amount = 3;
  int64 nonce = 4;
  bytes signature = 5;
  ChallengeCompleted challenge = 6;
}
message SendAmountResponse {
  oneof response{
    SendAmount sendAmount = 1;
    Error error = 2;
  }
}
message SendAmount{
  bytes signature = 1;
}

message ReceiveAmountRequest {
  bytes publicKey = 1;
  int32 transactionID = 2;
  bytes signature = 3;
  int64 nonce = 4;
  ChallengeCompleted challenge = 5;
}
message ReceiveAmountResponse {
  oneof response{
    ReceiveAmount receiveAmount = 1;
    Error error = 2;
  }
}
message ReceiveAmount {
  bytes signature = 1;
}

message CheckAccountRequest {
  bytes publicKey = 1;
  int64 nonce = 2;
  ChallengeCompleted challenge = 3;

}
message CheckAccountResponse {
  oneof response{
    CheckAccount checkAccount = 1;
    Error error = 2;
  }
}
message CheckAccount {
  int32 balance = 1;
  repeated Transaction transactions = 2;
  bytes signature = 3;
}

message AuditRequest {
  bytes publicKey = 1;
  bytes selfPublicKey = 2;
  int64 nonce = 3;
  ChallengeCompleted challenge = 4;
}
message AuditResponse {
  oneof response{
    Audit audit = 1;
    Error error = 2;
  }
}
message Audit {
  repeated Transaction transactions = 1;
  bytes signature = 2;
}

message UpdateTransactionsRequest {
  repeated Transaction transactions = 1;
  Quorum quorum = 2;
  int64 nonce = 3;
  ChallengeCompleted challenge = 4;
}

message Quorum {
  repeated Server serverMessages = 1;
}

message Server {
  string publicKey = 1;
  bytes signature = 2;
}

message Transaction {
  int32 idSender = 1;
  int32 idReceiver = 2;
  bytes sender = 3;
  bytes receiver = 4;
  int32 amount = 5;
  bool accepted = 6;
  int64 nonce = 7;
  bytes signature = 8;
}

message ServerUpdateRequest {
  int32 latestID = 1;
}

message ServerUpdateReply{
  repeated Transaction transactions = 1;
  bytes signature = 2;
}

message Ack {
}

service Service {
  rpc getChallenge(ChallengeRequest) returns (ChallengeResponse);
  rpc openAccount(OpenAccountRequest) returns (OpenAccountResponse);
  rpc sendAmount(SendAmountRequest) returns (SendAmountResponse);
  rpc receiveAmount(ReceiveAmountRequest) returns (ReceiveAmountResponse);
  rpc checkAccount(CheckAccountRequest) returns (CheckAccountResponse);
  rpc updateCheckAccount(CheckAccountRequest) returns (CheckAccountResponse);
  rpc Audit(AuditRequest) returns (AuditResponse);
  rpc updateTransactions(UpdateTransactionsRequest) returns (Ack);
  rpc GetMissingTransactions(ServerUpdateRequest) returns (ServerUpdateReply);
}